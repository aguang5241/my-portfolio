import { useState, useEffect } from 'react';
import Sidebar from './components/Sidebar.jsx';
import { Orbit, FlaskRound, SquaresExclude, Component, Store, Atom, Repeat, ChevronLeft, ChevronRight, Bot, } from 'lucide-react';
import app1 from './assets/app-1.png';
import app2 from './assets/app-2.png';
import app3 from './assets/app-3.png';
import app4 from './assets/app-4.png';
import app5 from './assets/app-5.png';
import app6 from './assets/app-6.png';
import app7 from './assets/app-7.png';
import app8 from './assets/app-8.png';

const applications = [
  {
    id: 1,
    name: 'HEP-Explorer',
    title: 'High-Entropy Perovskite Analyzer',
    description: 'An application for analyzing substitutional effects in ABO₃ high-entropy perovskites (HEPs).',
    icon: Orbit,
    color: 'from-blue-500 to-purple-600',
    features: ['High-Entropy Perovskites', 'Compositional Screening', 'Property Prediction', 'Performance Optimization']
  },
  {
    id: 2,
    name: 'LCO-Doper',
    title: 'LaCoO₃ Dopant Effects Analyzer',
    description: 'An application for analyzing both A-site and B-site dopant effects in LaCoO₃ perovskites (LCO).',
    icon: FlaskRound,
    color: 'from-green-500 to-teal-600',
    features: ['LaCoO₃ Analysis', 'Dopant Effects', 'Composition Optimization', 'Performance Enhancement']
  },
  {
    id: 3,
    name: 'Interface-Maker',
    title: 'Custom Slab & Interface Generator',
    description: 'An application for generating customizable slabs and interfaces for atomistic simulations.',
    icon: SquaresExclude,
    color: 'from-purple-500 to-pink-600',
    features: ['Slab Generation', 'Interface Creation', 'Customizable Parameters', 'Atomistic Simulations']
  },
  {
    id: 4,
    name: 'HEA-ML',
    title: 'High-Entropy Alloy Designer',
    description: 'An application for designing Al-Fe-Co-Cr-Ni high-entropy alloys by combining first-principles calculations and machine learning.',
    icon: Component,
    color: 'from-orange-500 to-red-600',
    features: ['High-Entropy Alloys', 'First-Principles Calculations', 'Machine Learning', 'Alloy Design']
  },
  {
    id: 5,
    name: 'Alloy-Supermarket',
    title: 'Sc-Modified Al-Si-Mg Alloy Designer',
    description: 'An application that integrates computational thermodynamics and machine learning for Sc-modified Al-Si-Mg alloy design.',
    icon: Store,
    color: 'from-cyan-500 to-blue-600',
    features: ['Al-Si-Mg Alloys', 'Scandium Modification', 'Computational Thermodynamics', 'Machine Learning']
  },
  {
    id: 6,
    name: 'SQS-Kit',
    title: 'Special Quasi Random Structures Toolkit',
    description: 'A toolkit for pre- and post-processing files generated by mcsqs (ATAT).',
    icon: Atom,
    color: 'from-yellow-500 to-orange-600',
    features: ['SQS Generation', 'ATAT Integration', 'Pre-processing', 'Post-processing']
  },
  {
    id: 7,
    name: 'POSCAR-Converter',
    title: 'POSCAR File Converter',
    description: 'A application that converts VASP POSCAR files between Cartesian and fractional coordinates.',
    icon: Repeat,
    color: 'from-pink-500 to-red-600',
    features: ['POSCAR Conversion', 'Coordinate Transformation', 'Atomic Simulation', 'Python Application']
  },
  {
    id: 8,
    name: 'Py-chatGPT',
    title: 'ChatGPT-based Chatbot',
    description: 'A chatbot using chatGPT API, supporting both text-based and voice-based chatting.',
    icon: Bot,
    color: 'from-pink-500 to-red-600',
    features: ['ChatGPT API', 'Text-based Chatting', 'Voice-based Chatting', 'User-friendly Interface']
  },
];

export default function RotatingAppShowcase() {
  const [currentIndex, setCurrentIndex] = useState(0);
  const [isAnimating, setIsAnimating] = useState(false);
  const [autoRotate, setAutoRotate] = useState(true);

  // Auto rotation effect
  useEffect(() => {
    if (!autoRotate) return;
    
    const interval = setInterval(() => {
      handleNext();
    }, 5000);

    return () => clearInterval(interval);
  }, [currentIndex, autoRotate]);

  const handleNext = () => {
    if (isAnimating) return;
    setIsAnimating(true);
    setCurrentIndex((prev) => (prev + 1) % applications.length);
    setTimeout(() => setIsAnimating(false), 200);
  };

  const handlePrev = () => {
    if (isAnimating) return;
    setIsAnimating(true);
    setCurrentIndex((prev) => (prev - 1 + applications.length) % applications.length);
    setTimeout(() => setIsAnimating(false), 200);
  };

  const handleDotClick = (index) => {
    if (isAnimating || index === currentIndex) return;
    setIsAnimating(true);
    setCurrentIndex(index);
    setTimeout(() => setIsAnimating(false), 200);
  };

  const getPositionClass = (index) => {
    const isActive = index === currentIndex;
    
    if (isActive) {
      // Selected app goes to center
      return {
        transform: 'translate(0px, 0px) scale(1.3)',
        opacity: 1,
        zIndex: 30,
        transition: 'all 0.6s cubic-bezier(0.4, 0, 0.2, 1)'
      };
    } else {
      // Other apps arranged in circle around the center
      const otherApps = applications.filter((_, i) => i !== currentIndex);
      const otherIndex = otherApps.findIndex((_, i) => applications.indexOf(otherApps[i]) === index);
      const total = otherApps.length;
      const angle = (2 * Math.PI * otherIndex) / total;
      const radius = 140;
      const x = Math.cos(angle) * radius;
      const y = Math.sin(angle) * radius;
      
      return {
        transform: `translate(${x}px, ${y}px) scale(0.85)`,
        opacity: 0.7,
        zIndex: 20,
        transition: 'all 0.6s cubic-bezier(0.4, 0, 0.2, 1)'
      };
    }
  };

  const handleLaunch = (appName) => {
    switch(appName) {
      case 'HEP-Explorer':
        window.open('https://hep-explorer.streamlit.app/', '_blank');
        break;
      case 'LCO-Doper':
        window.open('https://lco-doper.streamlit.app/', '_blank');
        break;
      case 'Interface-Maker':
        window.open('https://interface-maker.streamlit.app/', '_blank');
        break;
      case 'HEA-ML':
        window.open('https://github.com/aguang5241/HEA-ML/', '_blank');
        break;
      case 'Alloy-Supermarket':
        window.open('https://github.com/aguang5241/Alloy-Supermarket/', '_blank');
        break;
      case 'SQS-Kit':
        window.open('https://github.com/aguang5241/SQSkit/', '_blank');
        break;
      case 'POSCAR-Converter':
        window.open('https://github.com/aguang5241/POSCAR-Converter/', '_blank');
        break;
      case 'Py-chatGPT':
        window.open('https://github.com/aguang5241/Py-chatGPT/', '_blank');
      default:
        console.log(`Launch ${appName}`);
    }
  };

  const currentApp = applications[currentIndex];
  const IconComponent = currentApp.icon;
  const appImages = {
    1: app1,
    2: app2,
    3: app3,
    4: app4,
    5: app5,
    6: app6,
    7: app7,
    8: app8,
  };

  return (
    // Background color and animation
    <div className="min-h-screen bg-gradient-to-r from-[#0a0f2c] via-[#0b2451] to-[#073a59] bg-[length:200%_200%] animate-gradient-x flex relative overflow-hidden text-white">

      {/* Background circles */}
      <div className="absolute inset-0">
        <div className="absolute top-10 left-10 w-72 h-72 bg-green-500/15 rounded-full blur-3xl animate-pulse"></div>
        <div className="absolute top-1/2 left-1/4 w-64 h-64 bg-yellow-500/15 rounded-full blur-3xl animate-pulse" style={{animationDelay: '2s'}}></div>
        <div className="absolute bottom-10 right-10 w-96 h-96 bg-red-500/15 rounded-full blur-3xl animate-pulse" style={{animationDelay: '5s'}}></div>
      </div>

      {/* Sidebar */}
      <Sidebar />

      {/* Main content - Always has left margin on desktop */}
      <div className="lg:ml-80 flex-1 flex flex-col items-center justify-center p-4">
        
        {/* Welcome message */}
        <div className="w-full max-w-7xl mb-8">
          <h1 className="text-4xl md:text-5xl font-bold text-white text-center mb-2">
            Hi, there! I'm Guangchen Liu.
          </h1>
          <p className="text-lg text-gray-300 text-center">
            Welcome to my portfolio! Have a good time exploring my featured applications below.
          </p>
        </div>

        <div className="max-w-7xl mx-auto grid lg:grid-cols-2 gap-12 items-center relative z-10">
          <div className="text-white space-y-6">
            <div className={`transition-all duration-150 ${isAnimating ? 'opacity-50' : 'opacity-100'}`}>
              {/* Header */}
              <div className="flex items-center space-x-4 mb-6">
                <div className={`w-16 h-16 rounded-xl bg-gradient-to-br ${currentApp.color} flex items-center justify-center`}>
                  <IconComponent className="w-8 h-8 text-white" />
                </div>
                <div>
                  <div className="text-sm text-blue-300 font-medium">{currentApp.name}</div>
                  <h1 className="text-3xl font-bold">{currentApp.title}</h1>
                </div>
              </div>

              {/* Description */}
              <p className="text-lg text-gray-300 leading-relaxed mb-8">
                {currentApp.description}
              </p>

              {/* Features */}
              <div className="space-y-4">
                <h3 className="text-xl font-semibold text-white">Key Features</h3>
                <div className="grid grid-cols-2 gap-3">
                  {currentApp.features.map((feature, index) => (
                    <div
                      key={feature}
                      className="flex items-center space-x-2 p-3 rounded-lg bg-white/5 backdrop-blur-sm
                                border border-white/10 hover:bg-white/10 transition-all duration-300"
                    >
                      <div className={`w-3 h-3 rounded-full bg-gradient-to-r ${currentApp.color}`}></div>
                      <span className="text-sm font-medium">{feature}</span>
                    </div>
                  ))}
                </div>
              </div>

              {/* CTA Button */}
              <div className="pt-6">
                <button 
                  onClick={() => handleLaunch(currentApp.name)}
                  className={`px-8 py-4 rounded-xl bg-gradient-to-r ${currentApp.color} 
                                  text-white font-semibold hover:scale-105 transition-all duration-300
                                  shadow-2xl hover:shadow-3xl`}
                >
                  Launch {currentApp.name}
                </button>
              </div>

              {/* Application Image */}
              <div className="pt-6">
                <div className="relative overflow-hidden rounded-xl shadow-2xl">
                  <img 
                    key={currentApp.id}
                    src={appImages[currentApp.id]}
                    alt={`${currentApp.name} application screenshot`}
                    className="w-full h-64 object-cover transition-transform duration-300 hover:scale-105 filter grayscale-[0.3] brightness-25 contrast-110"
                    onError={(e) => {
                      e.target.style.display = 'none';
                      e.target.nextSibling.style.display = 'flex';
                    }}
                    onLoad={(e) => {
                      e.target.style.display = 'block';
                      e.target.nextSibling.style.display = 'none';
                    }}
                  />
                  <div className="absolute inset-0 bg-gray-900/20 pointer-events-none"></div>
                  <div 
                    key={`fallback-${currentApp.id}`}
                    className="w-full h-64 bg-gradient-to-br from-gray-700 to-gray-800 rounded-xl flex items-center justify-center text-gray-400 hidden"
                  >
                    <div className="text-center">
                      <div className={`w-16 h-16 mx-auto mb-3 rounded-lg bg-gradient-to-br ${currentApp.color} flex items-center justify-center`}>
                        <IconComponent className="w-8 h-8 text-white" />
                      </div>
                      <p className="text-sm">Image preview</p>
                      <p className="text-xs">app-{currentApp.id}.png</p>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <div className="relative">
            <div 
              className="flex items-center justify-center"
              onMouseEnter={() => setAutoRotate(false)}
              onMouseLeave={() => setAutoRotate(true)}
            >
              <div className="relative w-96 h-96 flex items-center justify-center">
                {applications.map((app, index) => {
                  const AppIcon = app.icon;
                  return (
                    <div
                      key={app.id}
                      className={`absolute w-20 h-20 rounded-2xl bg-gradient-to-br ${app.color} 
                                flex items-center justify-center cursor-pointer
                                hover:scale-105 shadow-2xl
                                ${index === currentIndex ? 'ring-4 ring-white/30' : ''}`}
                      style={getPositionClass(index)}
                      onClick={() => handleDotClick(index)}
                    >
                      <AppIcon className="w-10 h-10 text-white" />
                    </div>
                  );
                })}
              </div>
            </div>

            {/* Navigation controls */}
            <div className="flex justify-center items-center mt-8 space-x-6">
              <button
                onClick={handlePrev}
                disabled={isAnimating}
                className="p-3 rounded-full bg-white/10 backdrop-blur-sm hover:bg-white/20 
                          transition-all duration-300 disabled:opacity-50 group"
              >
                <ChevronLeft className="w-6 h-6 text-white group-hover:scale-110 transition-transform" />
              </button>

              <div className="flex space-x-2">
                {applications.map((_, index) => (
                  <button
                    key={index}
                    onClick={() => handleDotClick(index)}
                    className={`w-2 h-2 rounded-full transition-all duration-300 ${
                      index === currentIndex 
                        ? 'bg-white scale-125' 
                        : 'bg-white/40 hover:bg-white/70'
                    }`}
                  />
                ))}
              </div>

              <button
                onClick={handleNext}
                disabled={isAnimating}
                className="p-3 rounded-full bg-white/10 backdrop-blur-sm hover:bg-white/20 
                          transition-all duration-300 disabled:opacity-50 group"
              >
                <ChevronRight className="w-6 h-6 text-white group-hover:scale-110 transition-transform" />
              </button>
            </div>
          </div>
        </div>
      </div>

      <div className="fixed bottom-6 right-6 flex items-center space-x-2 text-white/60 text-sm z-30">
        <div className={`w-2 h-2 rounded-full ${autoRotate ? 'bg-green-400 animate-pulse' : 'bg-gray-400'}`}></div>
        <span>{autoRotate ? 'Auto-rotating' : 'Paused'}</span>
      </div>
    </div>
  );
}
